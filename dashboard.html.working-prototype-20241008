<!DOCTYPE html>
<!-- Last updated: 2025-01-05 00:49 UTC - PDF and Profile fixes -->
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard - CodeCraftMD</title>
  <meta name="description" content="CodeCraftMD Dashboard - AI-powered medical billing and ICD-10 code extraction">
  <meta name="theme-color" content="#1D4ED8">
  <meta name="color-scheme" content="light">
  <link rel="manifest" href="/manifest.json">
  <link rel="icon" type="image/png" sizes="192x192" href="/icons/icon-192x192.png">
  <link rel="apple-touch-icon" href="/icons/icon-192x192.png">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/mobile-enhancements.css">
  
  <!-- PDFMake for PDF Generation -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.min.js"></script>
  
  <!-- Stripe.js for Payment Processing -->
  <script src="https://js.stripe.com/v3/"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
  <script>
    // Initialize PDF.js worker
    if (typeof pdfjsLib !== 'undefined') {
      pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
    }
  </script>
  
  <!-- Firebase SDKs - Latest Version -->
  <script src="https://www.gstatic.com/firebasejs/10.14.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.14.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.14.0/firebase-functions-compat.js"></script>
</head>
<body class="bg-white min-h-screen">
  
  <!-- Navigation -->
  <nav class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <div class="flex items-center">
          <!-- CodeCraftMD Professional Logo -->
          <div class="flex items-center mr-4">
            <div class="relative">
              <!-- Medical Cross + Code Symbol -->
              <svg class="w-8 h-8 mr-3" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <!-- Medical Cross Background -->
                <rect width="32" height="32" rx="6" fill="#1D4ED8"/>
                <!-- Cross -->
                <rect x="14" y="6" width="4" height="20" fill="white" rx="1"/>
                <rect x="6" y="14" width="20" height="4" fill="white" rx="1"/>
                <!-- Code Brackets -->
                <path d="M10 10L8 12L10 14" stroke="#60A5FA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M22 10L24 12L22 14" stroke="#60A5FA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div>
              <h1 class="text-xl font-bold text-blue-700" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; letter-spacing: -0.5px;">CodeCraftMD</h1>
              <p class="text-xs text-gray-500 -mt-1" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;">Medical Billing Automation</p>
            </div>
          </div>
          <span class="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded">Dashboard</span>
        </div>
        <div class="flex items-center space-x-4">
          <div id="usageCounter" class="text-sm">
            <!-- Usage counter will be populated here -->
          </div>
          <div id="creditsDisplay" class="text-sm bg-green-50 border border-green-200 px-3 py-1 rounded-md">
            <span class="text-green-700">Credits: </span>
            <span id="creditCount" class="font-bold text-green-800">Loading...</span>
            <button onclick="showPaymentModal()" class="ml-2 text-blue-600 hover:text-blue-800 text-xs underline">
              Buy More
            </button>
          </div>
          <span class="text-sm text-gray-600">Welcome, <span id="user-email">user@example.com</span></span>
          <button id="profileBtn" class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 text-xs">
            Profile Settings
          </button>
          <button id="logoutBtn" class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700">
            Sign Out
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Upload Section -->
    <div class="bg-white rounded-lg shadow p-6 mb-8">
      <h2 class="text-lg font-semibold text-gray-900 mb-4">üìã Upload Consultation Notes</h2>
      
      <!-- File Upload -->
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">Upload File (.txt, .docx, .pdf)</label>
        <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md hover:border-blue-400 transition-colors">
          <div class="space-y-1 text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
              <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            <div class="flex text-sm text-gray-600">
              <label for="file-upload" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500">
                <span>Upload a file</span>
                <input id="file-upload" name="file-upload" type="file" class="sr-only" accept=".txt,.docx,.pdf">
              </label>
              <p class="pl-1">or drag and drop</p>
            </div>
            <p class="text-xs text-gray-500">TXT, DOCX, PDF up to 10MB</p>
          </div>
        </div>
      </div>

      <!-- Text Input -->
      <div class="mb-6">
        <label for="consultNote" class="block text-sm font-medium text-gray-700 mb-2">Or Paste Notes Directly</label>
        <textarea 
          id="consultNote" 
          rows="6" 
          class="w-full p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
          placeholder="Paste your consultation notes here...">
        </textarea>
      </div>

      <!-- Extract Button -->
      <button 
        id="extractBtn" 
        class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
        type="button">
        ü§ñ Extract ICD-10 Codes
      </button>
      
      <!-- Loading State -->
      <div id="loadingState" class="hidden mt-4 text-center">
        <div class="inline-flex items-center px-4 py-2 text-sm text-blue-600">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Processing consultation notes...
        </div>
      </div>
    </div>

    <!-- ICD-10 Results Section -->
    <div id="resultsSection" class="hidden bg-white rounded-lg shadow p-6 mb-8">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-semibold text-gray-900">üè• Extracted ICD-10 Codes</h2>
        <div class="flex space-x-2">
          <button id="addCodeBtn" class="bg-green-600 text-white px-3 py-1 text-sm rounded hover:bg-green-700">
            + Add Code
          </button>
          <input 
            id="searchCodes" 
            type="text" 
            placeholder="Search codes..." 
            class="px-3 py-1 text-sm border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
        </div>
      </div>
      
      <div id="icdResults" class="space-y-2">
        <!-- ICD codes will be populated here -->
      </div>
    </div>

    <!-- Billing Form Section -->
    <div id="billingSection" class="hidden bg-white rounded-lg shadow p-6 mb-8">
      <h2 class="text-lg font-semibold text-gray-900 mb-4">üßæ Billing Information</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Patient Information -->
        <div>
          <h3 class="text-md font-medium text-gray-700 mb-3">Patient Information</h3>
          <div class="space-y-3">
            <input id="patientName" type="text" placeholder="Patient Name" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <input id="patientDOB" type="date" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <input id="patientID" type="text" placeholder="Patient ID" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <input id="patientHospital" type="text" placeholder="Hospital/Facility" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <select id="patientGender" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
              <option value="">Select Gender</option>
              <option value="M">Male</option>
              <option value="F">Female</option>
              <option value="O">Other</option>
            </select>
          </div>
        </div>
        
        <!-- Provider Information -->
        <div>
          <h3 class="text-md font-medium text-gray-700 mb-3">Provider Information</h3>
          <div class="space-y-3">
            <input id="providerName" type="text" placeholder="Provider Name" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <input id="providerNPI" type="text" placeholder="NPI Number" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <input id="facilityName" type="text" placeholder="Facility Name" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
            <input id="serviceDate" type="date" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
          </div>
        </div>
      </div>
      
      <div class="mt-6">
        <button id="generatePDFBtn" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 mr-3">
          üìÑ Generate PDF Summary
        </button>
        <button id="testPDFBtn" class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 mr-3">
          üß™ Test Simple PDF
        </button>
        <button id="saveDraftBtn" class="bg-gray-400 text-white px-6 py-2 rounded-md hover:bg-gray-500">
          üíæ Save Draft
        </button>
      </div>
    </div>
    
    <!-- Diagnostic Information -->
    <div class="bg-yellow-50 border border-yellow-200 rounded-lg shadow p-6 mb-6">
      <h2 class="text-lg font-semibold text-gray-900 mb-4">üîß System Diagnostics</h2>
      <div id="diagnostics" class="space-y-2 text-sm">
        <div>Loading diagnostics...</div>
      </div>
    </div>

    <!-- Recent Consultations -->
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex justify-between items-center mb-6">
        <div>
          <h2 class="text-lg font-semibold text-gray-900">üìö Recent Consultations</h2>
          <p class="text-sm text-gray-500 mt-1">View, edit, and regenerate PDFs from your consultation history</p>
        </div>
        <div class="flex space-x-2">
          <button id="refreshHistoryBtn" onclick="console.log('Refresh button clicked'); loadConsultationHistory()" class="text-sm text-blue-600 hover:text-blue-800 px-3 py-1 rounded border border-blue-200 hover:bg-blue-50">
            üîÑ Refresh
          </button>
          <button id="clearHistoryBtn" class="text-sm text-red-600 hover:text-red-800 px-3 py-1 rounded border border-red-200 hover:bg-red-50">
            üóëÔ∏è Clear All
          </button>
        </div>
      </div>
      <div id="consultHistory" class="space-y-3">
        <div class="text-center py-8">
          <div class="text-gray-400 text-4xl mb-2">üìÑ</div>
          <p class="text-gray-500 text-sm">No consultations yet</p>
          <p class="text-gray-400 text-xs mt-1">Save a consultation to see it appear here</p>
        </div>
      </div>
    </div>
    
  </div>

  <!-- User Profile Setup Modal -->
  <div id="profileModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-20 overflow-y-auto h-full w-full z-50" onclick="closeProfileModal()">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white" onclick="event.stopPropagation()">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 text-center mb-4">Provider Profile Setup</h3>
        <div class="mt-2 px-7 py-3">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Personal Information -->
            <div>
              <h4 class="text-md font-medium text-gray-700 mb-3">Personal Information</h4>
              <div class="space-y-3">
                <input id="profileFullName" type="text" placeholder="Full Name (e.g., Dr. John Smith, MD)" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                <input id="profileTitle" type="text" placeholder="Professional Title (e.g., MD, DO, NP)" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                <input id="profileSpecialty" type="text" placeholder="Medical Specialty" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
              </div>
            </div>
            
            <!-- Practice Information -->
            <div>
              <h4 class="text-md font-medium text-gray-700 mb-3">Practice Information</h4>
              <div class="space-y-3">
                <input id="profileNPI" type="text" placeholder="NPI Number" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                <input id="profilePractice" type="text" placeholder="Practice/Facility Name" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                <input id="profileAddress" type="text" placeholder="Practice Address" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                <input id="profilePhone" type="text" placeholder="Practice Phone" class="w-full p-3 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
              </div>
            </div>
          </div>
          
        </div>
        
        <div class="items-center px-4 py-3">
          <div class="flex justify-center space-x-4">
            <button id="saveProfile" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-auto shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
              Save Profile
            </button>
            <button id="cancelProfile" class="px-4 py-2 bg-gray-300 text-gray-700 text-base font-medium rounded-md w-auto shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Payment Modal -->
  <div id="paymentModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-20 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between pb-3">
          <h3 class="text-lg font-medium text-gray-900">Purchase Credits</h3>
          <button onclick="hidePaymentModal()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="space-y-4">
          <div class="text-sm text-gray-600 mb-4">
            <p>Each credit allows one AI analysis or enhanced billing generation.</p>
            <p class="mt-1"><strong>Current Rate:</strong> 1 credit = $1.00</p>
          </div>
          
          <!-- Credit Packages -->
          <div class="grid grid-cols-2 gap-3">
            <button onclick="selectCreditPackage(10, 10)" class="credit-package border-2 border-gray-200 hover:border-blue-500 rounded-lg p-3 text-center">
              <div class="font-bold">10 Credits</div>
              <div class="text-sm text-gray-600">$10.00</div>
            </button>
            <button onclick="selectCreditPackage(25, 25)" class="credit-package border-2 border-gray-200 hover:border-blue-500 rounded-lg p-3 text-center">
              <div class="font-bold">25 Credits</div>
              <div class="text-sm text-gray-600">$25.00</div>
            </button>
            <button onclick="selectCreditPackage(50, 50)" class="credit-package border-2 border-gray-200 hover:border-blue-500 rounded-lg p-3 text-center">
              <div class="font-bold">50 Credits</div>
              <div class="text-sm text-gray-600">$50.00</div>
            </button>
            <button onclick="selectCreditPackage(100, 100)" class="credit-package border-2 border-gray-200 hover:border-blue-500 rounded-lg p-3 text-center">
              <div class="font-bold">100 Credits</div>
              <div class="text-sm text-gray-600">$100.00</div>
            </button>
          </div>
          
          <div id="selectedPackage" class="hidden bg-blue-50 border border-blue-200 rounded-lg p-3">
            <div class="text-sm">Selected: <span id="selectedCredits"></span> credits for $<span id="selectedAmount"></span></div>
          </div>
          
          <!-- Payment Form -->
          <div id="paymentForm" class="hidden">
            <div id="card-element" class="p-3 border border-gray-300 rounded-md">
              <!-- Stripe Elements will create form elements here -->
            </div>
            <div id="card-errors" class="text-red-600 text-sm mt-2"></div>
            
            <button id="paymentSubmit" class="w-full mt-4 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50">
              Complete Purchase
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Profile Modal -->
  <div id="billingModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-20 overflow-y-auto h-full w-full z-50" onclick="closeBillingModal()">
    <div class="relative top-20 mx-auto p-8 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white" onclick="event.stopPropagation()">
      <div class="mt-3">
        <div class="text-center">
          <h3 class="text-2xl font-bold text-gray-900 mb-4">üöÄ Upgrade Your Plan</h3>
          <p class="text-gray-600 mb-6">You've used all 6 free consultations. Choose a plan to continue:</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <!-- Pay Per Consultation -->
          <div class="border-2 border-gray-200 rounded-lg p-6 hover:border-blue-500 transition-colors">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">üí∞ Pay Per Use</h4>
              <div class="text-3xl font-bold text-blue-600 mb-2">$9.99</div>
              <p class="text-gray-500 text-sm mb-4">per consultation</p>
              <ul class="text-sm text-gray-600 text-left mb-6">
                <li class="flex items-center mb-2">‚úÖ Professional PDF reports</li>
                <li class="flex items-center mb-2">‚úÖ ICD-10 code extraction</li>
                <li class="flex items-center mb-2">‚úÖ HIPAA compliant storage</li>
                <li class="flex items-center mb-2">‚úÖ No monthly commitment</li>
              </ul>
              <button onclick="redirectToStripeCheckout('pay_per_consult')" 
                      class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 font-medium">
                Choose Pay Per Use
              </button>
            </div>
          </div>
          
          <!-- Monthly Subscription -->
          <div class="border-2 border-blue-500 rounded-lg p-6 relative">
            <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
              <span class="bg-blue-500 text-white px-3 py-1 text-sm rounded-full">Most Popular</span>
            </div>
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">üîÑ Monthly Unlimited</h4>
              <div class="text-3xl font-bold text-blue-600 mb-2">$29.99</div>
              <p class="text-gray-500 text-sm mb-4">per month</p>
              <ul class="text-sm text-gray-600 text-left mb-6">
                <li class="flex items-center mb-2">‚úÖ Unlimited consultations</li>
                <li class="flex items-center mb-2">‚úÖ Professional PDF reports</li>
                <li class="flex items-center mb-2">‚úÖ ICD-10 code extraction</li>
                <li class="flex items-center mb-2">‚úÖ HIPAA compliant storage</li>
                <li class="flex items-center mb-2">‚úÖ Priority support</li>
              </ul>
              <button onclick="redirectToStripeCheckout('monthly_subscription')" 
                      class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 font-medium">
                Choose Monthly Plan
              </button>
            </div>
          </div>
        </div>
        
        <div class="text-center">
          <button onclick="closeBillingModal()" 
                  class="text-gray-500 hover:text-gray-700 text-sm">
            Maybe later
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Application Script -->
  <script>
    // Firebase Configuration
    const firebaseConfig = {
      apiKey: "AIzaSyDxAdkFfUtpZzgZkEwN0389fh7Bak3oe4E",
      authDomain: "codecraftmd-e48b0.firebaseapp.com",
      projectId: "codecraftmd-e48b0",
      storageBucket: "codecraftmd-e48b0.appspot.com",
      messagingSenderId: "410377358686",
      appId: "1:410377358686:web:ba8f33b03827281e5993cf"
    };
    
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();
    const functions = firebase.functions();
    // Note: For compat SDK, the region is set at the function call level
    
    // Global variables
    let currentUser = null;
    let extractedCodes = [];
    let currentConsultText = '';
    
    // Initialize app
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, initializing app...');
      initializeApp();
      setupEventListeners();
      setTimeout(runDiagnostics, 1000); // Run diagnostics after everything loads
      
      // Test profile button after a delay
      setTimeout(() => {
        const profileBtn = document.getElementById('profileBtn');
        console.log('Profile button test:', profileBtn ? 'FOUND' : 'NOT FOUND');
        if (profileBtn) {
          console.log('Profile button click listener should be attached');
        }
      }, 2000);
    });
    
    function initializeApp() {
      // Auth state listener
      auth.onAuthStateChanged((user) => {
        console.log('üîê Auth state changed:', user ? 'LOGGED IN' : 'LOGGED OUT');
        if (user) {
          console.log('üë§ User details:', {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName
          });
          currentUser = user;
          document.getElementById('user-email').textContent = user.email || user.displayName || 'Unknown User';
          
          console.log('üîß Functions object:', functions);
          console.log('üîß Functions region:', functions._url);
          
          loadConsultationHistory();
          loadUserProfile(); // Load user profile on authentication
          loadUserUsage(); // Load usage tracking
          loadUserCredits(); // Load user credits
          // setTimeout(() => updateUsageDisplay(), 1000); // Update usage display after loading
        } else {
          console.log('‚ùå No user - redirecting to login');
          // Redirect to main landing page instead of public login page
          window.location.href = '/index.html';
        }
      });
    }
    
    function setupEventListeners() {
      console.log('Setting up event listeners...');
      // Auth
      document.getElementById('logoutBtn').addEventListener('click', signOut);
      document.getElementById('profileBtn').addEventListener('click', () => {
        console.log('Profile button clicked');
        openProfileModal();
      });
      
      // File upload
      const fileUploadElement = document.getElementById('file-upload');
      console.log('File upload element:', fileUploadElement);
      if (fileUploadElement) {
        fileUploadElement.addEventListener('change', (e) => {
          console.log('File selected:', e.target.files);
          handleFileUpload(e);
        });
      } else {
        console.error('File upload element not found!');
      }
      
      // ICD extraction
      document.getElementById('extractBtn').addEventListener('click', extractICD10Codes);
      
      // ICD management
      document.getElementById('addCodeBtn').addEventListener('click', addManualCode);
      document.getElementById('searchCodes').addEventListener('input', searchCodes);
      
      // PDF generation
      const pdfBtn = document.getElementById('generatePDFBtn');
      console.log('PDF button element found:', pdfBtn);
      if (pdfBtn) {
        pdfBtn.addEventListener('click', function(e) {
          console.log('PDF button clicked - event triggered');
          e.preventDefault();
          generatePDF();
        });
      } else {
        console.error('PDF button not found!');
      }
      
      // Test PDF generation
      const testPdfBtn = document.getElementById('testPDFBtn');
      console.log('Test PDF button element found:', testPdfBtn);
      if (testPdfBtn) {
        testPdfBtn.addEventListener('click', function(e) {
          console.log('Test PDF button clicked');
          e.preventDefault();
          generateSimpleTestPDF();
        });
      }
      document.getElementById('saveDraftBtn').addEventListener('click', saveDraft);
      
      // History management
      document.getElementById('clearHistoryBtn').addEventListener('click', clearHistory);
      
      // Profile management
      const saveProfileBtn = document.getElementById('saveProfile');
      const cancelProfileBtn = document.getElementById('cancelProfile');
      
      console.log('Save Profile button found:', saveProfileBtn);
      console.log('Cancel Profile button found:', cancelProfileBtn);
      
      if (saveProfileBtn) {
        saveProfileBtn.addEventListener('click', function(e) {
          console.log('Save Profile button clicked - event triggered');
          e.preventDefault();
          e.stopPropagation();
          saveUserProfile();
        });
        console.log('Save Profile event listener attached');
      } else {
        console.error('Save Profile button not found in DOM!');
      }
      
      if (cancelProfileBtn) {
        cancelProfileBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          console.log('Cancel button clicked');
          closeProfileModal();
        });
      }
    }
    
    // Authentication
    function signOut() {
      auth.signOut().then(() => {
        window.location.href = '/index.html';
      }).catch((error) => {
        console.error('Sign out error:', error);
        showError('Error signing out');
      });
    }
    
    // Profile management
    let userProfile = {};
    
    
    function openProfileModal() {
      console.log('openProfileModal called');
      try {
        console.log('Loading user profile...');
        loadUserProfile();
        const modal = document.getElementById('profileModal');
        console.log('Profile modal element:', modal);
        if (modal) {
          modal.classList.remove('hidden');
          console.log('Profile modal should now be visible');
          console.log('Modal classes after opening:', modal.className);
        } else {
          console.error('Profile modal element not found!');
        }
      } catch (error) {
        console.error('Error opening profile modal:', error);
        showError('Error opening profile settings');
      }
    }
    
    function closeProfileModal() {
      console.log('Closing profile modal');
      const modal = document.getElementById('profileModal');
      if (modal) {
        modal.classList.add('hidden');
        console.log('Modal closed successfully');
      }
    }
    
    // Add escape key listener
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        const modal = document.getElementById('profileModal');
        if (modal && !modal.classList.contains('hidden')) {
          closeProfileModal();
        }
      }
    });
    
    async function saveUserProfile() {
      console.log('saveUserProfile called');
      console.log('Current user:', currentUser);
      
      if (!currentUser) {
        console.error('No current user');
        showError('No user logged in');
        return;
      }
      
      // Check if form elements exist
      const formElements = {
        fullName: document.getElementById('profileFullName'),
        title: document.getElementById('profileTitle'),
        specialty: document.getElementById('profileSpecialty'),
        npi: document.getElementById('profileNPI'),
        practice: document.getElementById('profilePractice'),
        address: document.getElementById('profileAddress'),
        phone: document.getElementById('profilePhone')
      };
      
      console.log('Form elements found:', formElements);
      
      // Check if any elements are missing
      for (const [key, element] of Object.entries(formElements)) {
        if (!element) {
          console.error(`Form element ${key} not found!`);
          showError(`Form element ${key} not found - modal may not be properly loaded`);
          return;
        }
      }
      
      const profileData = {
        fullName: formElements.fullName.value,
        title: formElements.title.value,
        specialty: formElements.specialty.value,
        npi: formElements.npi.value,
        practice: formElements.practice.value,
        address: formElements.address.value,
        phone: formElements.phone.value,
        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
      };
      
      console.log('Profile data to save:', profileData);
      
      // Check if Firestore is available
      if (!db) {
        console.error('Firestore database not initialized!');
        showError('Database not available. Please refresh the page.');
        return;
      }
      
      try {
        console.log('Attempting to save to Firestore...');
        const docRef = db.collection('user_profiles').doc(currentUser.uid);
        console.log('Document reference:', docRef);
        await docRef.set(profileData);
        console.log('Profile saved to Firestore successfully');
        userProfile = profileData;
        populateProviderFields();
        closeProfileModal();
        showSuccess('Profile saved successfully!');
      } catch (error) {
        showError('Error saving profile: ' + error.message);
      }
    }
    
    async function loadUserProfile() {
      console.log('loadUserProfile called');
      console.log('Current user for profile loading:', currentUser);
      
      if (!currentUser) {
        console.log('No current user, skipping profile load');
        return;
      }
      
      try {
        console.log('Fetching user profile from Firestore...');
        const doc = await db.collection('user_profiles').doc(currentUser.uid).get();
        console.log('Profile document retrieved:', doc.exists);
        
        if (doc.exists) {
          userProfile = doc.data();
          console.log('Loaded user profile:', userProfile);
          
          // Check if modal fields exist before populating
          const modalFields = {
            profileFullName: document.getElementById('profileFullName'),
            profileTitle: document.getElementById('profileTitle'),
            profileSpecialty: document.getElementById('profileSpecialty'),
            profileNPI: document.getElementById('profileNPI'),
            profilePractice: document.getElementById('profilePractice'),
            profileAddress: document.getElementById('profileAddress'),
            profilePhone: document.getElementById('profilePhone')
          };
          
          console.log('Modal fields found:', modalFields);
          
          // Populate modal fields
          if (modalFields.profileFullName) modalFields.profileFullName.value = userProfile.fullName || '';
          if (modalFields.profileTitle) modalFields.profileTitle.value = userProfile.title || '';
          if (modalFields.profileSpecialty) modalFields.profileSpecialty.value = userProfile.specialty || '';
          if (modalFields.profileNPI) modalFields.profileNPI.value = userProfile.npi || '';
          if (modalFields.profilePractice) modalFields.profilePractice.value = userProfile.practice || '';
          if (modalFields.profileAddress) modalFields.profileAddress.value = userProfile.address || '';
          if (modalFields.profilePhone) modalFields.profilePhone.value = userProfile.phone || '';
          
          console.log('Profile fields populated in modal');
          
          // Auto-populate provider fields in dashboard
          populateProviderFields();
        }
      } catch (error) {
        console.error('Error loading profile:', error);
      }
    }
    
    function populateProviderFields() {
      if (userProfile.fullName) {
        document.getElementById('providerName').value = userProfile.fullName;
      }
      if (userProfile.npi) {
        document.getElementById('providerNPI').value = userProfile.npi;
      }
      if (userProfile.practice) {
        document.getElementById('facilityName').value = userProfile.practice;
      }
    }
    
    // File handling
    async function handleFileUpload(event) {
      console.log('handleFileUpload called');
      const file = event.target.files[0];
      if (!file) {
        console.log('No file selected');
        return;
      }
      
      console.log('File selected:', {
        name: file.name,
        type: file.type,
        size: file.size
      });
      
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        showError('File size exceeds 10MB limit');
        return;
      }
      
      try {
        showLoading(true, 'Reading file...');
        let text = '';
        
        console.log('Processing file type:', file.type);
        
        if (file.type === 'text/plain') {
          console.log('Reading as text file');
          text = await readTextFile(file);
        } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
          console.log('Reading as DOCX file');
          text = await readDocxFile(file);
        } else if (file.type === 'application/pdf') {
          console.log('Reading as PDF file');
          console.log('PDF.js available:', typeof pdfjsLib !== 'undefined');
          text = await readPDFFile(file);
        } else {
          console.error('Unsupported file type:', file.type);
          throw new Error(`Unsupported file type: ${file.type}`);
        }
        
        console.log('File read successfully, text length:', text.length);
        document.getElementById('consultNote').value = text;
        showLoading(false);
        showSuccess('File loaded successfully');
      } catch (error) {
        console.error('Error reading file:', error);
        showLoading(false);
        showError('Error reading file: ' + error.message);
      }
    }
    
    function readTextFile(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.onerror = (e) => reject(new Error('Failed to read text file'));
        reader.readAsText(file);
      });
    }
    
    function readDocxFile(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = async (e) => {
          try {
            const arrayBuffer = e.target.result;
            const result = await mammoth.extractRawText({ arrayBuffer });
            resolve(result.value);
          } catch (error) {
            reject(new Error('Failed to read DOCX file'));
          }
        };
        reader.onerror = (e) => reject(new Error('Failed to read DOCX file'));
        reader.readAsArrayBuffer(file);
      });
    }
    
    async function readPDFFile(file) {
      return new Promise((resolve, reject) => {
        console.log('Starting PDF reading process');
        
        // Check if PDF.js is available
        if (typeof pdfjsLib === 'undefined') {
          console.error('PDF.js library not available');
          reject(new Error('PDF.js library not loaded. Please refresh the page.'));
          return;
        }
        
        const reader = new FileReader();
        reader.onload = async (e) => {
          try {
            console.log('FileReader onload triggered');
            const arrayBuffer = e.target.result;
            console.log('Array buffer size:', arrayBuffer.byteLength);
            
            const typedArray = new Uint8Array(arrayBuffer);
            console.log('Created typed array, size:', typedArray.length);
            
            const loadingTask = pdfjsLib.getDocument(typedArray);
            console.log('Created PDF loading task');
            
            const pdf = await loadingTask.promise;
            console.log('PDF loaded successfully, pages:', pdf.numPages);
            
            let text = '';
            
            for (let i = 1; i <= pdf.numPages; i++) {
              console.log(`Processing page ${i}/${pdf.numPages}`);
              const page = await pdf.getPage(i);
              const textContent = await page.getTextContent();
              const pageText = textContent.items.map(item => item.str).join(' ');
              text += pageText + '\n';
            }
            
            console.log('PDF text extraction complete, total length:', text.length);
            resolve(text);
          } catch (error) {
            console.error('Error in PDF processing:', error);
            reject(new Error(`Failed to read PDF file: ${error.message}`));
          }
        };
        
        reader.onerror = (e) => {
          console.error('FileReader error:', e);
          reject(new Error('Failed to read PDF file - FileReader error'));
        };
        
        console.log('Starting FileReader.readAsArrayBuffer');
        reader.readAsArrayBuffer(file);
      });
    }
    
    // ICD-10 Extraction
    async function extractICD10Codes() {
      const noteText = document.getElementById('consultNote').value.trim();
      
      if (!noteText) {
        showError('Please enter or upload consultation notes');
        return;
      }
      
      // Check if user has enough credits for AI analysis
      console.log('üîç Checking user credits for AI analysis...');
      try {
        const hasCredits = await checkCreditsForOperation('ai_analysis');
        console.log('üí≥ Credit check result:', hasCredits);
        if (!hasCredits) {
          console.warn('‚ö†Ô∏è Insufficient credits - stopping extraction');
          return;
        }
        console.log('‚úÖ Credits available - proceeding with extraction');
      } catch (creditError) {
        console.error('‚ùå Credit check failed:', creditError);
        console.log('üîÑ Proceeding without credit check for debugging');
        // Continue anyway for debugging - you can remove this later
      }
      
      currentConsultText = noteText;
      
      try {
        showLoading(true, 'Extracting ICD-10 codes...');
        
        const codes = await callOpenAIForICD10(noteText);
        extractedCodes = codes;
        
        // Track usage for successful AI analysis
        await trackUsage('ai_analysis', { 
          codesExtracted: codes.length, 
          textLength: noteText.length 
        });
        
        displayExtractedCodes(codes);
        document.getElementById('resultsSection').classList.remove('hidden');
        document.getElementById('billingSection').classList.remove('hidden');
        
        showLoading(false);
        showSuccess(`Extracted ${codes.length} ICD-10 codes`);
      } catch (error) {
        showLoading(false);
        showError('Error extracting codes: ' + error.message);
        
        // Fallback to regex extraction
        const fallbackCodes = extractCodesWithRegex(noteText);
        if (fallbackCodes.length > 0) {
          extractedCodes = fallbackCodes;
          displayExtractedCodes(fallbackCodes);
          document.getElementById('resultsSection').classList.remove('hidden');
          document.getElementById('billingSection').classList.remove('hidden');
          showError('Using basic code detection. Please review carefully.');
        }
      }
    }
    
    async function callOpenAIForICD10(noteText) {
      // First try Firebase Function for secure server-side AI processing
      console.log('üî• Starting OpenAI API call via Firebase Function...');
      console.log('üìù Note text length:', noteText.length);
      
      try {
        console.log('üîê Getting Firebase auth token...');
        const token = await firebase.auth().currentUser.getIdToken();
        console.log('‚úÖ Auth token obtained, making API request...');
        
        const response = await fetch('https://us-central1-codecraftmd-e48b0.cloudfunctions.net/extractICD10Codes', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ consultationText: noteText })
        });
        
        console.log('üåê Response status:', response.status, response.statusText);
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('‚ùå HTTP error response:', errorText);
          throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }
        
        const result = await response.json();
        console.log('üîÑ Firebase Function response:', result);
        
        // Handle different response formats from Firebase Function
        const responseData = result.data || result;
        
        if (responseData.success) {
          if (responseData.warning) {
            console.warn('‚ö†Ô∏è API Warning:', responseData.warning);
            showError(responseData.warning);
          }
          console.log('‚úÖ Firebase Function returned codes:', responseData.codes);
          
          // Store enhanced data globally for use in PDF generation and display
          if (responseData.medicalNecessity || responseData.cptDetails) {
            window.enhancedBillingData = {
              icd10_codes: responseData.codes || [],
              cpt_code: responseData.cptDetails?.code || null,
              cpt_justification: responseData.cptDetails?.justification || null,
              medical_necessity: responseData.medicalNecessity || null,
              encounter_type: responseData.billingInfo?.encounterType || null,
              complexity: responseData.billingInfo?.complexity || null
            };
            console.log('üíæ Enhanced billing data stored from Firebase:', window.enhancedBillingData);
          }
          
          return responseData.codes || [];
        } else {
          console.error('‚ùå AI extraction service error:', responseData);
          throw new Error('AI extraction service returned an error: ' + (responseData.error || 'Unknown error'));
        }
      } catch (error) {
        console.warn('Firebase Function not available, trying client-side approach:', error);
        
        // Fallback to client-side OpenAI call (for development/testing)
        return await callOpenAIDirectly(noteText);
      }
    }
    
    async function callOpenAIDirectly(noteText) {
      // OpenAI API key - should be moved to environment variables in production
      const apiKey = process.env.OPENAI_API_KEY || 'YOUR_OPENAI_API_KEY_HERE'; // OpenAI API key
      
      if (!apiKey || apiKey === 'YOUR_OPENAI_API_KEY_HERE') {
        throw new Error('OpenAI API key not configured. Please update the code with your API key.');
      }
      
      try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          body: JSON.stringify({
            model: 'gpt-4',
            messages: [{
              role: 'system',
              content: `You are an expert medical billing and coding specialist with comprehensive knowledge across all medical specialties. Create a detailed professional billing summary from clinical consultation notes that includes:

1. ICD-10 codes with highly accurate descriptions and appropriate classifications (including trimester specifications for obstetric conditions, laterality for procedures, episode of care specifications, etc.)
2. Appropriate CPT code selection based on complexity, time, and medical decision-making level with comprehensive justification paragraph
3. Detailed medical necessity narrative that thoroughly explains case complexity, comorbidities, and clinical reasoning
4. Patient demographic and clinical summary extraction

Analyze the consultation note carefully to determine:
- Primary and secondary diagnoses with precise ICD-10 coding
- Appropriate CPT code based on visit complexity (99211-99215 for office visits, 99221-99233 for inpatient, etc.)
- Medical decision-making complexity (straightforward, low, moderate, high)
- Time spent and clinical factors justifying the selected CPT code
- Date of service/consultation if mentioned in the note
- Comprehensive narrative explaining medical necessity

Return JSON with this exact structure:
{
  "icd10_codes": [
    {"code": "[precise ICD-10 with modifiers]", "description": "[comprehensive description with proper classifications, trimester, laterality, etc.]"}
  ],
  "cpt_code": "[appropriate CPT code]",
  "cpt_justification": "[Selected CPT code] ‚Äì [Brief description of service type]. Justification: [Comprehensive paragraph explaining complexity level, time factors, medical decision-making rationale, coordination of care, risk level, and specific clinical factors that support the selected CPT code level.]",
  "medical_necessity": "[Detailed narrative: Patient age/demographics and presenting condition(s). Explain case complexity including comorbidities, risk factors, and clinical reasoning. Describe diagnostic workup, therapeutic interventions, monitoring requirements, and care coordination. Include specific medical factors that make this case complex and justify the level of service provided.]",
  "patient_summary": {
    "age": "[patient age if mentioned]",
    "primary_diagnosis": "[primary presenting condition]",
    "complexity_factors": "[key factors contributing to case complexity]",
    "service_date": "[date of consultation/service if mentioned in note, format as YYYY-MM-DD, or null if not found]"
  }
}

Be medically precise, use accurate ICD-10 classifications appropriate for the specific medical specialty and condition, ensure CPT codes match the documented complexity and setting of care, and provide comprehensive clinical justification.`
            }, {
              role: 'user',
              content: `Create a professional billing summary from this clinical note:\n\n${noteText}`
            }],
            temperature: 0.1,
            max_tokens: 1000
          })
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            localStorage.removeItem('openai_api_key');
            throw new Error('Invalid OpenAI API key. Please check your key.');
          }
          throw new Error(`OpenAI API error: ${response.status}`);
        }
        
        const data = await response.json();
        const result = data.choices[0].message.content;
        
        try {
          const parsedResult = JSON.parse(result);
          console.log('‚úÖ OpenAI Response Parsed Successfully:', parsedResult);
          
          // Store enhanced billing data globally for PDF generation
          window.enhancedBillingData = parsedResult;
          console.log('üíæ Enhanced billing data stored:', window.enhancedBillingData);
          
          // Handle different response formats
          let extractedCodes = [];
          
          // Check for enhanced format (with icd10_codes array)
          if (parsedResult.icd10_codes && Array.isArray(parsedResult.icd10_codes)) {
            extractedCodes = parsedResult.icd10_codes;
            console.log('üìã Using enhanced format ICD codes:', extractedCodes.length);
          } 
          // Check for basic format (direct array)
          else if (Array.isArray(parsedResult)) {
            extractedCodes = parsedResult;
            console.log('üìã Using basic format ICD codes:', extractedCodes.length);
          }
          // Check for nested codes array
          else if (parsedResult.codes && Array.isArray(parsedResult.codes)) {
            extractedCodes = parsedResult.codes;
            console.log('üìã Using nested codes format:', extractedCodes.length);
          }
          
          // Log CPT information if available
          if (parsedResult.cpt_code) {
            console.log('üí∞ CPT Code extracted:', parsedResult.cpt_code);
          }
          
          console.log('üîç Final extracted codes array:', extractedCodes);
          return extractedCodes;
        } catch (parseError) {
          console.error('‚ùå Failed to parse AI response:', parseError);
          console.log('üìÑ Raw AI response:', result);
          // Fallback to regex if AI response can't be parsed
          throw new Error('AI response parsing failed: ' + parseError.message);
        }
        
      } catch (error) {
        console.error('Direct OpenAI call failed:', error);
        throw error;
      }
    }
    
    function extractCodesWithRegex(noteText) {
      const icdPattern = /\b[A-TV-Z][0-9][0-9AB](?:\.[0-9A-TV-Z]{1,4})?\b/g;
      const matches = [...new Set(noteText.match(icdPattern) || [])];
      
      return matches.map(code => ({
        code: code,
        description: 'Description not available (manual review required)'
      }));
    }
    
    function displayExtractedCodes(codes) {
      const container = document.getElementById('icdResults');
      
      if (codes.length === 0) {
        container.innerHTML = '<p class="text-gray-500">No ICD-10 codes found.</p>';
        return;
      }
      
      // Build the codes display
      let codesHTML = codes.map((item, index) => {
        const codeTypeClass = (item.type === 'CPT') ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800';
        const codeTypeIcon = (item.type === 'CPT') ? 'üí∞' : 'üè•';
        
        return `
        <div class="flex items-center justify-between p-3 bg-gray-50 rounded border" data-index="${index}">
          <div class="flex-1">
            <div class="flex items-center space-x-3">
              <span class="font-mono text-sm ${codeTypeClass} px-2 py-1 rounded">
                ${codeTypeIcon} ${item.code}
              </span>
              <span class="text-sm text-gray-700">${item.description}</span>
              ${item.confidence ? `<span class="text-xs text-gray-500 bg-gray-200 px-2 py-1 rounded">${item.confidence}</span>` : ''}
            </div>
          </div>
          <div class="flex space-x-2">
            <button onclick="editCode(${index})" class="text-blue-600 hover:text-blue-800 text-sm">Edit</button>
            <button onclick="removeCode(${index})" class="text-red-600 hover:text-red-800 text-sm">Remove</button>
          </div>
        </div>
      `;
      }).join('');
      
      // Add enhanced information section if available
      if (window.enhancedBillingData) {
        const data = window.enhancedBillingData;
        let enhancedInfoHTML = '<div class="mt-6 border-t pt-4">';
        
        // CPT Information Section
        if (data.cpt_code || data.cpt_justification) {
          enhancedInfoHTML += `
            <div class="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
              <h4 class="text-sm font-semibold text-green-800 mb-2">üí∞ CPT Procedure Code</h4>
              ${data.cpt_code ? `<p class="font-mono text-lg font-bold text-green-700 mb-2">${data.cpt_code}</p>` : ''}
              ${data.cpt_justification ? `<p class="text-sm text-green-700">${data.cpt_justification}</p>` : ''}
              ${data.complexity ? `<p class="text-xs text-green-600 mt-1"><strong>Complexity:</strong> ${data.complexity}</p>` : ''}
            </div>
          `;
        }
        
        // Medical Necessity Section
        if (data.medical_necessity) {
          enhancedInfoHTML += `
            <div class="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 class="text-sm font-semibold text-blue-800 mb-2">üìã Summary of Medical Necessity</h4>
              <p class="text-sm text-blue-700 leading-relaxed">${data.medical_necessity}</p>
            </div>
          `;
        }
        
        enhancedInfoHTML += '</div>';
        codesHTML += enhancedInfoHTML;
      }
      
      container.innerHTML = codesHTML;
    }
    
    function addManualCode() {
      const code = prompt('Enter ICD-10 code:');
      if (!code) return;
      
      const description = prompt('Enter description:') || 'Manual entry';
      
      extractedCodes.push({ code: code.toUpperCase(), description });
      displayExtractedCodes(extractedCodes);
    }
    
    function editCode(index) {
      const item = extractedCodes[index];
      const newCode = prompt('Edit ICD-10 code:', item.code);
      if (newCode) {
        const newDescription = prompt('Edit description:', item.description);
        if (newDescription) {
          extractedCodes[index] = { code: newCode.toUpperCase(), description: newDescription };
          displayExtractedCodes(extractedCodes);
        }
      }
    }
    
    function removeCode(index) {
      if (confirm('Remove this code?')) {
        extractedCodes.splice(index, 1);
        displayExtractedCodes(extractedCodes);
      }
    }
    
    function searchCodes() {
      const searchTerm = document.getElementById('searchCodes').value.toLowerCase();
      const codeElements = document.querySelectorAll('#icdResults > div');
      
      codeElements.forEach(element => {
        const text = element.textContent.toLowerCase();
        element.style.display = text.includes(searchTerm) ? 'flex' : 'none';
      });
    }
    
    // Simple Test PDF Generation
    function generateSimpleTestPDF() {
      console.log('generateSimpleTestPDF called');
      
      if (typeof pdfMake === 'undefined') {
        console.error('PDFMake library not loaded!');
        alert('PDF library not loaded. Please refresh the page.');
        return;
      }
      
      try {
        console.log('Creating simple test PDF...');
        const docDefinition = {
          content: [
            'This is a simple test PDF',
            'Generated by CodeCraftMD',
            'Current time: ' + new Date().toString()
          ]
        };
        
        console.log('Test PDF docDefinition:', docDefinition);
        const pdfDoc = pdfMake.createPdf(docDefinition);
        console.log('PDF document created:', pdfDoc);
        
        // Check if popup blocker might interfere
        setTimeout(() => {
          try {
            pdfDoc.download('test.pdf');
            console.log('Test PDF download initiated');
            showSuccess('Test PDF generation completed!');
          } catch (downloadError) {
            console.error('PDF download failed:', downloadError);
            showError('PDF download failed - popup blocker may be interfering: ' + downloadError.message);
          }
        }, 100);
      } catch (error) {
        console.error('Test PDF generation failed:', error);
        alert('Test PDF generation failed: ' + error.message);
      }
    }
    
    // Enhanced Professional PDF Generation
    function generatePDF() {
      console.log('generatePDF called with enhanced billing format');
      console.log('PDFMake available:', typeof pdfMake !== 'undefined');
      console.log('extractedCodes:', extractedCodes);
      console.log('enhancedBillingData:', window.enhancedBillingData);
      
      if (typeof pdfMake === 'undefined') {
        console.error('PDFMake library not loaded!');
        showError('PDF library not loaded. Please refresh the page.');
        return;
      }
      
      // Get form data
      const patientName = document.getElementById('patientName').value || 'N/A';
      const patientDOB = document.getElementById('patientDOB').value || 'N/A';
      const patientID = document.getElementById('patientID').value || 'N/A';
      const patientHospital = document.getElementById('patientHospital').value || 'N/A';
      const patientGender = document.getElementById('patientGender').value || 'N/A';
      const providerName = document.getElementById('providerName').value || 'N/A';
      const providerNPI = document.getElementById('providerNPI').value || 'N/A';
      const facilityName = document.getElementById('facilityName').value || 'N/A';
      const serviceDate = document.getElementById('serviceDate').value || new Date().toISOString().split('T')[0];
      
      // Use enhanced billing data if available, otherwise fallback to basic format
      const billingData = window.enhancedBillingData;
      let cptCode = '99213';
      let cptJustification = 'Office visit for established patient with moderate complexity medical decision making.';
      let medicalNecessity = 'Standard medical consultation with ICD-10 code extraction and billing documentation.';
      let codesForPDF = extractedCodes;
      let extractedServiceDate = null;
      
      if (billingData) {
        cptCode = billingData.cpt_code || cptCode;
        cptJustification = billingData.cpt_justification || cptJustification;
        medicalNecessity = billingData.medical_necessity || medicalNecessity;
        codesForPDF = billingData.icd10_codes || extractedCodes;
        
        // Try to extract service date from AI analysis
        if (billingData.patient_summary && billingData.patient_summary.service_date) {
          extractedServiceDate = billingData.patient_summary.service_date;
        }
      }
      
      // Use extracted date if available, otherwise form date, otherwise blank for manual entry
      let consultationServiceDate;
      if (extractedServiceDate) {
        consultationServiceDate = extractedServiceDate;
      } else if (serviceDate && serviceDate !== new Date().toISOString().split('T')[0]) {
        consultationServiceDate = serviceDate;
      } else {
        consultationServiceDate = '____________________'; // Blank line for manual entry
      }
      
      if (!codesForPDF || codesForPDF.length === 0) {
        codesForPDF = [{ code: 'No codes', description: 'No ICD-10 codes extracted yet' }];
      }
      
      // Create enhanced professional PDF that matches GPT format
      try {
        console.log('Creating enhanced professional PDF...');
        
        // Enhanced Professional Billing Summary (matches GPT format)
        const docDefinition = {
          content: [
            // Professional Header
            {
              columns: [
                {
                  text: [
                    { text: 'CodeCraftMD\n', style: 'companyName' },
                    { text: 'Medical Billing Automation', style: 'tagline' }
                  ],
                  width: '60%'
                },
                {
                  text: [
                    { text: 'BILLING SUMMARY\n', style: 'header' },
                    { text: new Date().toLocaleDateString(), style: 'dateText' }
                  ],
                  alignment: 'right',
                  width: '40%'
                }
              ],
              margin: [0, 0, 0, 20]
            },
            
            // Professional separator line
            { text: '_'.repeat(80), style: 'separator', margin: [0, 0, 0, 20] },
            
            // Remove MFM-specific header since this is for all physicians
            
            // Patient Information (inline format like GPT)
            {
              text: [
                { text: 'Patient Name: ', style: 'label' },
                { text: patientName + '\n', style: 'value' },
                { text: 'DOB: ', style: 'label' },
                { text: patientDOB + '\n', style: 'value' },
                { text: 'MRN: ', style: 'label' },
                { text: patientID + '\n', style: 'value' },
                { text: 'Date of Service: ', style: 'label' },
                { text: consultationServiceDate + '\n', style: 'value' },
                { text: 'Location: ', style: 'label' },
                { text: patientHospital, style: 'value' }
              ],
              margin: [0, 10, 0, 20]
            },
            
            // Separator line
            { text: '_'.repeat(80), style: 'thinSeparator', margin: [0, 0, 0, 20] },
            
            // CPT Code Section
            { text: 'CPT Code:', style: 'sectionHeader' },
            {
              text: [
                { text: cptCode + ' ‚Äì ', style: 'cptCode' },
                { text: cptJustification, style: 'justification' }
              ],
              margin: [0, 5, 0, 20]
            },
            
            // Separator line
            { text: '_'.repeat(80), style: 'thinSeparator', margin: [0, 0, 0, 20] },
            
            // ICD-10 Diagnosis Codes Section
            { text: 'ICD-10 Diagnosis Codes:', style: 'sectionHeader' },
            {
              ul: codesForPDF.map(item => [
                { text: item.code + ' ‚Äì ', style: 'icdCode' },
                { text: item.description, style: 'icdDescription' }
              ]),
              margin: [0, 5, 0, 20]
            },
            
            // Separator line  
            { text: '_'.repeat(80), style: 'thinSeparator', margin: [0, 0, 0, 20] },
            
            // Provider Information Section (after ICD-10)
            { text: 'Provider Information:', style: 'sectionHeader' },
            {
              text: [
                { text: 'Provider Name: ', style: 'label' },
                { text: (providerName + (userProfile && userProfile.title ? ', ' + userProfile.title : '')) + '\n', style: 'value' },
                { text: 'NPI Number: ', style: 'label' },
                { text: providerNPI + '\n', style: 'value' },
                { text: 'Specialty: ', style: 'label' },
                { text: ((userProfile && userProfile.specialty) || 'N/A') + '\n', style: 'value' },
                { text: 'Facility: ', style: 'label' },
                { text: facilityName + '\n', style: 'value' },
                { text: 'Address: ', style: 'label' },
                { text: ((userProfile && userProfile.address) || 'N/A') + '\n', style: 'value' },
                { text: 'Phone: ', style: 'label' },
                { text: ((userProfile && userProfile.phone) || 'N/A'), style: 'value' }
              ],
              margin: [0, 5, 0, 20]
            },
            
            // Separator line  
            { text: '_'.repeat(80), style: 'thinSeparator', margin: [0, 0, 0, 20] },
            
            // Summary of Medical Necessity
            { text: 'Summary of Medical Necessity:', style: 'sectionHeader' },
            {
              text: medicalNecessity,
              style: 'medicalNecessity',
              margin: [0, 5, 0, 20]
            },
            
            // Separator line  
            { text: '_'.repeat(80), style: 'thinSeparator', margin: [0, 0, 0, 20] },
            
            // Provider Signature Section
            { text: 'Provider Signature:', style: 'sectionHeader' },
            {
              text: '\nSignature: _______________________________\n\nDate: _______________________\n',
              style: 'signatureLines',
              margin: [0, 10, 0, 10]
            },
            {
              text: providerName + (userProfile && userProfile.title ? ', ' + userProfile.title : ''),
              style: 'providerNameSignature',
              margin: [0, 0, 0, 20]
            }
          ],
          
          styles: {
            companyName: {
              fontSize: 18,
              bold: true,
              color: '#1D4ED8'
            },
            tagline: {
              fontSize: 10,
              color: '#6b7280',
              italics: true
            },
            header: {
              fontSize: 16,
              bold: true,
              color: '#1f2937'
            },
            dateText: {
              fontSize: 11,
              color: '#6b7280'
            },
            separator: {
              fontSize: 10,
              color: '#3b82f6',
              alignment: 'center'
            },
            thinSeparator: {
              fontSize: 8,
              color: '#9ca3af',
              alignment: 'left'
            },
            mainHeader: {
              fontSize: 16,
              bold: true,
              color: '#1f2937',
              margin: [0, 10, 0, 10]
            },
            label: {
              fontSize: 11,
              bold: true,
              color: '#374151'
            },
            value: {
              fontSize: 11,
              color: '#1f2937'
            },
            sectionHeader: {
              fontSize: 13,
              bold: true,
              color: '#1f2937',
              margin: [0, 0, 0, 5]
            },
            cptCode: {
              fontSize: 11,
              bold: true,
              color: '#1f2937'
            },
            justification: {
              fontSize: 11,
              color: '#374151',
              lineHeight: 1.3
            },
            icdCode: {
              fontSize: 11,
              bold: true,
              color: '#1f2937'
            },
            icdDescription: {
              fontSize: 11,
              color: '#374151'
            },
            medicalNecessity: {
              fontSize: 11,
              color: '#1f2937',
              lineHeight: 1.4,
              alignment: 'justify'
            },
            signatureLines: {
              fontSize: 11,
              color: '#1f2937',
              lineHeight: 1.5
            },
            providerNameSignature: {
              fontSize: 11,
              bold: true,
              color: '#1f2937'
            }
          }
        };
        
        console.log('Professional PDF docDefinition:', docDefinition);
        const pdfDoc = pdfMake.createPdf(docDefinition);
        console.log('Professional PDF document object created:', pdfDoc);
        
        // Use setTimeout to avoid popup blocking issues
        setTimeout(() => {
          try {
            const filename = `CodeCraftMD_${patientName}_${new Date().toISOString().split('T')[0]}.pdf`;
            console.log('Attempting to download professional PDF:', filename);
            pdfDoc.download(filename);
            console.log('Professional PDF generation completed successfully');
            showSuccess('PDF generated and downloaded successfully!');
            
            // Update consultation status asynchronously (separate function)
            updateConsultationStatusAsync();
          } catch (downloadError) {
            console.error('Professional PDF download error:', downloadError);
            showError('Error downloading PDF: ' + downloadError.message);
          }
        }, 100);
      } catch (error) {
        console.error('Professional PDF generation error:', error);
        showError('Error generating PDF: ' + error.message);
      }
    }
    
    // Helper function for updating consultation status
    async function updateConsultationStatusAsync() {
      try {
        if (!currentUser) return;
        
        const recentConsultQuery = await db.collection('consultations')
          .where('userId', '==', currentUser.uid)
          .orderBy('createdAt', 'desc')
          .limit(1)
          .get();
        
        if (!recentConsultQuery.empty) {
          const recentDoc = recentConsultQuery.docs[0];
          await recentDoc.ref.update({
            status: 'completed',
            pdfGeneratedAt: firebase.firestore.FieldValue.serverTimestamp()
          });
          loadConsultationHistory(); // Refresh history
        }
      } catch (error) {
        console.log('Could not update consultation status:', error.message);
      }
    }
    
    // Data persistence
    async function saveDraft() {
      if (!currentUser) return;
      
      // Check usage limits before saving consultation
      const canProceed = await checkUsageLimit();
      if (!canProceed) {
        return; // checkUsageLimit handles the billing redirect
      }
      
      const consultData = {
        userId: currentUser.uid,
        consultText: currentConsultText,
        extractedCodes: extractedCodes,
        patientInfo: {
          name: document.getElementById('patientName').value,
          dob: document.getElementById('patientDOB').value,
          id: document.getElementById('patientID').value,
          hospital: document.getElementById('patientHospital').value,
          gender: document.getElementById('patientGender').value
        },
        providerInfo: {
          name: document.getElementById('providerName').value,
          npi: document.getElementById('providerNPI').value,
          facility: document.getElementById('facilityName').value,
          serviceDate: document.getElementById('serviceDate').value
        },
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        status: 'draft'
      };
      
      try {
        console.log('Saving consultation to Firestore...', consultData);
        const docRef = await db.collection('consultations').add(consultData);
        console.log('Consultation saved with ID:', docRef.id);
        
        // Increment usage counter after successful save
        await incrementUsageCounter();
        
        showSuccess('Draft saved successfully');
        
        // Force reload consultation history after save
        console.log('Reloading consultation history...');
        setTimeout(() => {
          loadConsultationHistory();
        }, 1000); // Small delay to ensure Firestore indexing
        
        updateUsageDisplay(); // Show current usage to user
      } catch (error) {
        console.error('Error saving draft:', error);
        showError('Error saving draft: ' + error.message);
      }
    }
    
    async function loadConsultationHistory() {
      console.log('loadConsultationHistory called');
      if (!currentUser) {
        console.log('No current user, skipping history load');
        return;
      }
      
      console.log('Current user ID:', currentUser.uid);
      
      try {
        console.log('Querying consultations collection...');
        // First try a simple query without ordering to test basic access
        let querySnapshot;
        try {
          querySnapshot = await db.collection('consultations')
            .where('userId', '==', currentUser.uid)
            .orderBy('createdAt', 'desc')
            .limit(10)
            .get();
        } catch (indexError) {
          console.log('Ordered query failed, trying simple query:', indexError.message);
          // Fallback to simple query without ordering
          querySnapshot = await db.collection('consultations')
            .where('userId', '==', currentUser.uid)
            .limit(10)
            .get();
        }
          
        console.log('Query completed. Documents found:', querySnapshot.size);
        
        const historyContainer = document.getElementById('consultHistory');
        
        if (querySnapshot.empty) {
          historyContainer.innerHTML = `
            <div class="text-center py-8">
              <div class="text-gray-400 text-4xl mb-2">üìÑ</div>
              <p class="text-gray-500 text-sm">No consultations yet</p>
              <p class="text-gray-400 text-xs mt-1">Save a consultation to see it appear here</p>
            </div>
          `;
          return;
        }
        
        // Add a header with total count
        const totalConsultations = querySnapshot.size;
        const countHeader = `
          <div class="flex justify-between items-center mb-4 pb-2 border-b border-gray-200">
            <span class="text-sm font-medium text-gray-700">Showing ${totalConsultations} recent consultation${totalConsultations !== 1 ? 's' : ''}</span>
            <span class="text-xs text-gray-500">Most recent first</span>
          </div>
        `;
        
        const historyHTML = querySnapshot.docs.map((doc, index) => {
          const data = doc.data();
          const date = data.createdAt ? data.createdAt.toDate().toLocaleDateString() : 'Unknown';
          const time = data.createdAt ? data.createdAt.toDate().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : '';
          const patientName = data.patientInfo?.name || 'Unknown Patient';
          const patientId = data.patientInfo?.id || '';
          const codeCount = data.extractedCodes?.length || 0;
          const status = data.status || 'draft';
          const statusColor = status === 'completed' ? 'text-green-600' : 'text-yellow-600';
          const statusIcon = status === 'completed' ? '‚úÖ' : 'üìù';
          
          return `
            <div class="bg-white rounded border p-4 hover:shadow-md transition-shadow">
              <div class="flex justify-between items-start mb-2">
                <div class="flex-1">
                  <div class="flex items-center space-x-2 mb-1">
                    <h4 class="font-medium text-gray-900">${patientName}</h4>
                    <span class="${statusColor} text-xs">${statusIcon} ${status}</span>
                  </div>
                  <p class="text-xs text-gray-500">
                    ${patientId ? `ID: ${patientId} ‚Ä¢ ` : ''}${date} ${time}
                  </p>
                  <p class="text-xs text-blue-600 mt-1">
                    ${codeCount} ICD-10 codes extracted
                  </p>
                </div>
                <div class="text-xs text-gray-400 font-mono">
                  #${index + 1}
                </div>
              </div>
              
              <div class="flex justify-between items-center pt-2 border-t border-gray-100">
                <div class="flex space-x-2">
                  <button onclick="loadConsultation('${doc.id}')" 
                          class="text-blue-600 hover:text-blue-800 text-xs px-2 py-1 rounded border border-blue-200 hover:bg-blue-50">
                    üìù Load & Edit
                  </button>
                  <button onclick="regeneratePDF('${doc.id}')" 
                          class="text-green-600 hover:text-green-800 text-xs px-2 py-1 rounded border border-green-200 hover:bg-green-50">
                    üìÑ Generate PDF
                  </button>
                </div>
                <button onclick="deleteConsultation('${doc.id}')" 
                        class="text-red-500 hover:text-red-700 text-xs">
                  üóëÔ∏è Delete
                </button>
              </div>
            </div>
          `;
        }).join('');
        
        historyContainer.innerHTML = countHeader + historyHTML;
      } catch (error) {
        console.error('Error loading history:', error);
      }
    }
    
    async function loadConsultation(docId) {
      try {
        const doc = await db.collection('consultations').doc(docId).get();
        if (!doc.exists) return;
        
        const data = doc.data();
        
        // Load consultation text
        document.getElementById('consultNote').value = data.consultText || '';
        currentConsultText = data.consultText || '';
        
        // Load extracted codes
        extractedCodes = data.extractedCodes || [];
        if (extractedCodes.length > 0) {
          displayExtractedCodes(extractedCodes);
          document.getElementById('resultsSection').classList.remove('hidden');
          document.getElementById('billingSection').classList.remove('hidden');
        }
        
        // Load patient info
        if (data.patientInfo) {
          document.getElementById('patientName').value = data.patientInfo.name || '';
          document.getElementById('patientDOB').value = data.patientInfo.dob || '';
          document.getElementById('patientID').value = data.patientInfo.id || '';
          document.getElementById('patientHospital').value = data.patientInfo.hospital || '';
          document.getElementById('patientGender').value = data.patientInfo.gender || '';
        }
        
        // Load provider info
        if (data.providerInfo) {
          document.getElementById('providerName').value = data.providerInfo.name || '';
          document.getElementById('providerNPI').value = data.providerInfo.npi || '';
          document.getElementById('facilityName').value = data.providerInfo.facility || '';
          document.getElementById('serviceDate').value = data.providerInfo.serviceDate || '';
        }
        
        showSuccess('Consultation loaded successfully');
      } catch (error) {
        showError('Error loading consultation: ' + error.message);
      }
    }
    
    async function regeneratePDF(docId) {
      try {
        console.log('Regenerating PDF for consultation:', docId);
        
        // Load the consultation data
        const doc = await db.collection('consultations').doc(docId).get();
        if (!doc.exists) {
          showError('Consultation not found');
          return;
        }
        
        const data = doc.data();
        
        // Extract data for PDF generation
        const patientName = data.patientInfo?.name || 'N/A';
        const patientDOB = data.patientInfo?.dob || 'N/A';
        const patientID = data.patientInfo?.id || 'N/A';
        const patientHospital = data.patientInfo?.hospital || 'N/A';
        const patientGender = data.patientInfo?.gender || 'N/A';
        const providerName = data.providerInfo?.name || 'N/A';
        const providerNPI = data.providerInfo?.npi || 'N/A';
        const facilityName = data.providerInfo?.facility || 'N/A';
        const serviceDate = data.providerInfo?.serviceDate || 'N/A';
        const codesForPDF = data.extractedCodes || [{ code: 'No codes', description: 'No ICD-10 codes found' }];
        
        // Generate PDF with same structure as main generatePDF function
        const docDefinition = {
          content: [
            // Professional Header (TEXT ONLY - no logo)
            {
              columns: [
                {
                  text: [
                    { text: 'CodeCraftMD\n', style: 'companyName' },
                    { text: 'Medical Billing Automation', style: 'tagline' }
                  ],
                  width: '60%'
                },
                {
                  text: [
                    { text: 'BILLING SUMMARY\n', style: 'header' },
                    { text: new Date().toLocaleDateString(), style: 'dateText' }
                  ],
                  alignment: 'right',
                  width: '40%'
                }
              ],
              margin: [0, 0, 0, 10]
            },
            
            // Professional line separator
            { text: '‚îÅ'.repeat(80), style: 'separator', margin: [0, 10, 0, 20] },
            
            // Patient Information Table
            { text: 'Patient Information', style: 'subheader' },
            {
              table: {
                widths: ['30%', '70%'],
                body: [
                  ['Name:', patientName],
                  ['Date of Birth:', patientDOB],
                  ['Patient ID:', patientID],
                  ['Hospital/Facility:', patientHospital],
                  ['Gender:', patientGender]
                ]
              },
              layout: 'noBorders',
              margin: [0, 5, 0, 15]
            },
            
            // Provider Information Table
            { text: 'Provider Information', style: 'subheader' },
            {
              table: {
                widths: ['30%', '70%'],
                body: [
                  ['Provider Name:', providerName + (userProfile && userProfile.title ? ', ' + userProfile.title : '')],
                  ['NPI Number:', providerNPI],
                  ['Specialty:', (userProfile && userProfile.specialty) || 'N/A'],
                  ['Facility:', facilityName],
                  ['Address:', (userProfile && userProfile.address) || 'N/A'],
                  ['Phone:', (userProfile && userProfile.phone) || 'N/A'],
                  ['Service Date:', serviceDate]
                ]
              },
              layout: 'noBorders',
              margin: [0, 5, 0, 15]
            },
            
            // ICD-10 Codes Table
            { text: 'Diagnosis Codes (ICD-10)', style: 'subheader' },
            {
              table: {
                headerRows: 1,
                widths: ['20%', '80%'],
                body: [
                  [{ text: 'Code', style: 'tableHeader' }, { text: 'Description', style: 'tableHeader' }],
                  ...codesForPDF.map(item => [item.code, item.description])
                ]
              },
              margin: [0, 5, 0, 15]
            },
            
            // Signature Section
            { text: '\nProvider Signature', style: 'subheader' },
            {
              text: '[Electronic signature on file]',
              margin: [0, 10, 0, 5],
              style: 'signature'
            },
            {
              text: '_'.repeat(50),
              margin: [0, 0, 0, 5]
            },
            {
              text: providerName + (userProfile && userProfile.title ? ', ' + userProfile.title : ''),
              fontSize: 12,
              margin: [0, 0, 0, 10]
            },
            
            { text: '\nGenerated by CodeCraftMD on ' + new Date().toLocaleDateString(), style: 'footer' }
          ],
          
          styles: {
            header: { fontSize: 18, bold: true, color: '#1f2937' },
            subheader: { fontSize: 14, bold: true, margin: [0, 10, 0, 5], color: '#374151' },
            tableHeader: { bold: true, fontSize: 11, color: 'white', fillColor: '#3b82f6' },
            footer: { fontSize: 10, italics: true, alignment: 'center', color: '#6b7280' },
            signature: { fontSize: 12, italics: true, color: '#4b5563' },
            dateText: { fontSize: 11, color: '#6b7280' },
            companyName: { fontSize: 20, bold: true, color: '#1D4ED8' },
            tagline: { fontSize: 10, color: '#6b7280', italics: true },
            separator: { fontSize: 12, color: '#1D4ED8', alignment: 'center' }
          }
        };
        
        // Generate and download PDF
        const pdfDoc = pdfMake.createPdf(docDefinition);
        const filename = `CodeCraftMD_${patientName}_${new Date().toISOString().split('T')[0]}.pdf`;
        pdfDoc.download(filename);
        
        // Mark consultation as completed
        await db.collection('consultations').doc(docId).update({
          status: 'completed',
          lastPDFGenerated: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        showSuccess(`PDF regenerated successfully: ${filename}`);
        loadConsultationHistory(); // Refresh the history to show updated status
        
      } catch (error) {
        console.error('Error regenerating PDF:', error);
        showError('Error regenerating PDF: ' + error.message);
      }
    }
    
    async function deleteConsultation(docId) {
      if (!confirm('Are you sure you want to delete this consultation? This action cannot be undone.')) {
        return;
      }
      
      try {
        await db.collection('consultations').doc(docId).delete();
        showSuccess('Consultation deleted successfully');
        loadConsultationHistory(); // Refresh the history
        
        // Note: We don't decrement usage counter when deleting consultations
        // This prevents abuse of the system
        
      } catch (error) {
        console.error('Error deleting consultation:', error);
        showError('Error deleting consultation: ' + error.message);
      }
    }
    
    async function clearHistory() {
      if (!confirm('Are you sure you want to clear all consultation history?')) return;
      
      try {
        const querySnapshot = await db.collection('consultations')
          .where('userId', '==', currentUser.uid)
          .get();
        
        const batch = db.batch();
        querySnapshot.docs.forEach(doc => batch.delete(doc.ref));
        
        await batch.commit();
        loadConsultationHistory();
        showSuccess('History cleared successfully');
      } catch (error) {
        showError('Error clearing history: ' + error.message);
      }
    }
    
    // UI helpers
    function showLoading(show, message = 'Processing...') {
      const loadingState = document.getElementById('loadingState');
      const extractBtn = document.getElementById('extractBtn');
      
      if (show) {
        loadingState.classList.remove('hidden');
        loadingState.querySelector('div').innerHTML = `
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          ${message}
        `;
        extractBtn.disabled = true;
      } else {
        loadingState.classList.add('hidden');
        extractBtn.disabled = false;
      }
    }
    
    function showError(message) {
      showNotification(message, 'error');
    }
    
    function showSuccess(message) {
      showNotification(message, 'success');
    }
    
    function showNotification(message, type) {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 p-4 rounded-md shadow-lg z-50 ${
        type === 'error' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 5000);
    }
    
    // Diagnostic function
    function runDiagnostics() {
      const diagnosticsContainer = document.getElementById('diagnostics');
      if (!diagnosticsContainer) return;
      
      const diagnostics = [];
      
      // Check Firebase initialization
      diagnostics.push({
        name: 'Firebase App',
        status: typeof firebase !== 'undefined' && firebase.apps.length > 0,
        details: typeof firebase !== 'undefined' ? `${firebase.apps.length} apps` : 'Not loaded'
      });
      
      // Check Auth
      diagnostics.push({
        name: 'Firebase Auth',
        status: typeof auth !== 'undefined' && auth,
        details: currentUser ? `Logged in as ${currentUser.email}` : 'Not logged in'
      });
      
      // Check Firestore
      diagnostics.push({
        name: 'Firestore',
        status: typeof db !== 'undefined' && db,
        details: typeof db !== 'undefined' ? 'Connected' : 'Not connected'
      });
      
      // Check PDFMake
      diagnostics.push({
        name: 'PDFMake Library',
        status: typeof pdfMake !== 'undefined',
        details: typeof pdfMake !== 'undefined' ? 'Loaded' : 'Not loaded'
      });
      
      // Check critical buttons
      const pdfBtn = document.getElementById('generatePDFBtn');
      const testPdfBtn = document.getElementById('testPDFBtn');
      const saveProfileBtn = document.getElementById('saveProfile');
      const profileBtn = document.getElementById('profileBtn');
      
      diagnostics.push({
        name: 'PDF Generate Button',
        status: !!pdfBtn,
        details: pdfBtn ? 'Found' : 'Missing from DOM'
      });
      
      diagnostics.push({
        name: 'Test PDF Button',
        status: !!testPdfBtn,
        details: testPdfBtn ? 'Found' : 'Missing from DOM'
      });
      
      diagnostics.push({
        name: 'Save Profile Button',
        status: !!saveProfileBtn,
        details: saveProfileBtn ? 'Found' : 'Missing from DOM'
      });
      
      diagnostics.push({
        name: 'Profile Settings Button',
        status: !!profileBtn,
        details: profileBtn ? 'Found' : 'Missing from DOM'
      });
      
      // Check profile modal
      const profileModal = document.getElementById('profileModal');
      diagnostics.push({
        name: 'Profile Modal',
        status: !!profileModal,
        details: profileModal ? 'Found' : 'Missing from DOM'
      });
      
      // Check profile form fields
      const profileFields = [
        'profileFullName', 'profileTitle', 'profileSpecialty',
        'profileNPI', 'profilePractice', 'profileAddress', 'profilePhone'
      ];
      const missingFields = profileFields.filter(id => !document.getElementById(id));
      diagnostics.push({
        name: 'Profile Form Fields',
        status: missingFields.length === 0,
        details: missingFields.length === 0 ? 'All found' : `Missing: ${missingFields.join(', ')}`
      });
      
      // Display diagnostics
      const html = diagnostics.map(item => {
        const statusIcon = item.status ? '‚úÖ' : '‚ùå';
        const statusClass = item.status ? 'text-green-700' : 'text-red-700';
        return `
          <div class="flex justify-between items-center py-1">
            <span>${statusIcon} ${item.name}</span>
            <span class="${statusClass} font-mono">${item.details}</span>
          </div>
        `;
      }).join('');
      
      diagnosticsContainer.innerHTML = html;
      
      // Add a test button for immediate testing
      diagnosticsContainer.innerHTML += `
        <div class="mt-4 pt-4 border-t border-yellow-300">
          <button onclick="testPDFDirect()" class="bg-blue-500 text-white px-4 py-2 rounded mr-2 text-sm">
            üß™ Test PDF Direct
          </button>
          <button onclick="testProfileDirect()" class="bg-green-500 text-white px-4 py-2 rounded text-sm">
            üë§ Test Profile Direct
          </button>
        </div>
      `;
    }
    
    // Direct test functions for diagnostic buttons
    function testPDFDirect() {
      console.log('testPDFDirect called from diagnostic button');
      
      if (typeof pdfMake === 'undefined') {
        alert('PDFMake not loaded!');
        return;
      }
      
      try {
        const testDoc = {
          content: [
            'Direct PDF Test from Diagnostics',
            'This tests PDF generation directly',
            'Current time: ' + new Date().toString(),
            'User: ' + (currentUser ? currentUser.email : 'Not logged in')
          ]
        };
        
        pdfMake.createPdf(testDoc).download('diagnostic-test.pdf');
        alert('Direct PDF test completed!');
      } catch (error) {
        alert('Direct PDF test failed: ' + error.message);
        console.error('Direct PDF test error:', error);
      }
    }
    
    function testProfileDirect() {
      console.log('testProfileDirect called from diagnostic button');
      
      const modal = document.getElementById('profileModal');
      if (modal) {
        if (modal.classList.contains('hidden')) {
          openProfileModal();
          alert('Profile modal opened!');
        } else {
          closeProfileModal();
          alert('Profile modal closed!');
        }
      } else {
        alert('Profile modal not found!');
      }
    }
    
    // Usage Tracking and Billing Functions
    let userUsage = { consultationCount: 0, subscriptionStatus: 'free', lastReset: null };
    const FREE_CONSULTATION_LIMIT = 6;
    
    async function checkUsageLimit() {
      if (!currentUser) {
        showError('Please log in to continue');
        return false;
      }
      
      try {
        // Get current usage
        await loadUserUsage();
        
        console.log('Current usage:', userUsage);
        
        // Check if user has active subscription
        if (userUsage.subscriptionStatus === 'active' || userUsage.subscriptionStatus === 'unlimited') {
          console.log('User has active subscription - allowing consultation');
          return true;
        }
        
        // Check free consultation limit
        if (userUsage.consultationCount >= FREE_CONSULTATION_LIMIT) {
          console.log('Free consultation limit exceeded, showing billing modal');
          showBillingModal();
          return false;
        }
        
        console.log(`Free consultations remaining: ${FREE_CONSULTATION_LIMIT - userUsage.consultationCount}`);
        return true;
        
      } catch (error) {
        console.error('Error checking usage limit:', error);
        showError('Error checking usage limit. Please try again.');
        return false;
      }
    }
    
    async function loadUserUsage() {
      if (!currentUser) return;
      
      try {
        const usageDoc = await db.collection('user_usage').doc(currentUser.uid).get();
        
        if (usageDoc.exists) {
          userUsage = usageDoc.data();
        } else {
          // Initialize usage for new user
          userUsage = {
            consultationCount: 0,
            subscriptionStatus: 'free',
            lastReset: new Date(),
            stripeCustomerId: null,
            subscriptionId: null
          };
          
          await db.collection('user_usage').doc(currentUser.uid).set(userUsage);
        }
        
      } catch (error) {
        console.error('Error loading user usage:', error);
        userUsage = { consultationCount: 0, subscriptionStatus: 'free' };
      }
    }
    
    async function incrementUsageCounter() {
      if (!currentUser) return;
      
      try {
        const usageRef = db.collection('user_usage').doc(currentUser.uid);
        
        await usageRef.update({
          consultationCount: firebase.firestore.FieldValue.increment(1),
          lastConsultation: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        userUsage.consultationCount += 1;
        console.log('Usage counter incremented to:', userUsage.consultationCount);
        
      } catch (error) {
        console.error('Error in user authentication:', error);
      }
    };
    
    // Register Service Worker for PWA features
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then((registration) => {
            console.log('ServiceWorker registered successfully:', registration.scope);
          })
          .catch((error) => {
            console.log('ServiceWorker registration failed:', error);
          });
      });
    }
    
    // PWA Install prompt
    let deferredPrompt;
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      deferredPrompt = e;
      // Show install button if needed
      console.log('PWA install prompt available');
    });
    
    // ===== STRIPE PAYMENT INTEGRATION =====
    
    // Initialize Stripe
    const stripe = Stripe('pk_live_51SFOpiKKnLz5I7tfRe3ZZ4TmD9sCcFidwK74ftXq32SX8qRfwKFPzQRfpp86FvXh4VxuJftBYhif57O9ix2DYyrX00QvphB3rV');
    const elements = stripe.elements();
    let cardElement;
    let selectedCreditsAmount = 0;
    let selectedCreditsCount = 0;
    let userCredits = 0;
    
    // Load user credits on page load
    async function loadUserCredits() {
      console.log('üí∞ Loading user credits...');
      try {
        const token = await firebase.auth().currentUser.getIdToken();
        console.log('üìû Calling getUserPaymentInfo HTTP endpoint...');
        const response = await fetch('https://us-central1-codecraftmd-e48b0.cloudfunctions.net/getUserPaymentInfo', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ getUserPaymentInfo result:', result);
        userCredits = result.credits || 0;
        document.getElementById('creditCount').textContent = userCredits;
        console.log('üí∞ Credits loaded:', userCredits);
      } catch (error) {
        console.error('‚ùå Error loading user credits:', error);
        document.getElementById('creditCount').textContent = 'Error';
      }
    }
    
    // Show payment modal
    function showPaymentModal() {
      document.getElementById('paymentModal').classList.remove('hidden');
      if (!cardElement) {
        setupStripeElements();
      }
    }
    
    // Hide payment modal
    function hidePaymentModal() {
      document.getElementById('paymentModal').classList.add('hidden');
      document.getElementById('paymentForm').classList.add('hidden');
      document.getElementById('selectedPackage').classList.add('hidden');
      // Clear selected package styling
      document.querySelectorAll('.credit-package').forEach(btn => {
        btn.classList.remove('border-blue-500', 'bg-blue-50');
        btn.classList.add('border-gray-200');
      });
    }
    
    // Select credit package
    function selectCreditPackage(credits, amount) {
      selectedCreditsCount = credits;
      selectedCreditsAmount = amount;
      
      // Update UI
      document.getElementById('selectedCredits').textContent = credits;
      document.getElementById('selectedAmount').textContent = amount;
      document.getElementById('selectedPackage').classList.remove('hidden');
      document.getElementById('paymentForm').classList.remove('hidden');
      
      // Update package button styling
      document.querySelectorAll('.credit-package').forEach(btn => {
        btn.classList.remove('border-blue-500', 'bg-blue-50');
        btn.classList.add('border-gray-200');
      });
      event.target.closest('.credit-package').classList.add('border-blue-500', 'bg-blue-50');
    }
    
    // Setup Stripe Elements
    function setupStripeElements() {
      const style = {
        base: {
          color: '#424770',
          fontFamily: 'Arial, sans-serif',
          fontSmoothing: 'antialiased',
          fontSize: '16px',
          '::placeholder': {
            color: '#aab7c4'
          }
        },
        invalid: {
          color: '#9e2146',
          iconColor: '#fa755a'
        }
      };
      
      cardElement = elements.create('card', { style: style });
      cardElement.mount('#card-element');
      
      cardElement.on('change', ({ error }) => {
        const displayError = document.getElementById('card-errors');
        if (error) {
          displayError.textContent = error.message;
        } else {
          displayError.textContent = '';
        }
      });
      
      // Handle form submission
      document.getElementById('paymentSubmit').addEventListener('click', handlePaymentSubmit);
    }
    
    // Handle payment submission
    async function handlePaymentSubmit(event) {
      event.preventDefault();
      console.log('üöÄ Payment submission started');
      
      const submitButton = document.getElementById('paymentSubmit');
      submitButton.disabled = true;
      submitButton.textContent = 'Processing...';
      
      try {
        // Get authentication token
        const token = await firebase.auth().currentUser.getIdToken();
        
        // First, ensure we have a Stripe customer
        console.log('üîç Checking for existing customer...');
        let customerId = null;
        
        try {
          const userInfoResponse = await fetch('https://us-central1-codecraftmd-e48b0.cloudfunctions.net/getUserPaymentInfo', {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (userInfoResponse.ok) {
            const userInfo = await userInfoResponse.json();
            customerId = userInfo.stripeCustomerId;
            console.log('‚úÖ Found existing customer:', customerId);
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Error checking existing customer:', error.message);
        }
        
        // Create customer if needed
        if (!customerId) {
          console.log('üÜï Creating new customer...');
          const customerResponse = await fetch('https://us-central1-codecraftmd-e48b0.cloudfunctions.net/createCustomer', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              email: firebase.auth().currentUser.email,
              name: firebase.auth().currentUser.displayName || firebase.auth().currentUser.email,
              uid: firebase.auth().currentUser.uid
            })
          });
          
          if (!customerResponse.ok) {
            throw new Error(`Failed to create customer: ${customerResponse.status}`);
          }
          
          const customerResult = await customerResponse.json();
          customerId = customerResult.customerId;
          console.log('‚úÖ Created customer:', customerId);
        }
        
        // Create payment intent using HTTP endpoint
        console.log('üí≥ Creating payment intent for amount:', selectedCreditsAmount);
        const paymentIntentResponse = await fetch('https://us-central1-codecraftmd-e48b0.cloudfunctions.net/createPaymentIntent', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            amount: selectedCreditsAmount,
            currency: 'usd',
            customerId: customerId
          })
        });
        
        if (!paymentIntentResponse.ok) {
          throw new Error(`Failed to create payment intent: ${paymentIntentResponse.status}`);
        }
        
        const result = await paymentIntentResponse.json();
        const clientSecret = result.clientSecret;
        console.log('‚úÖ Payment intent created, client secret received');
        console.log('Client secret preview:', clientSecret ? clientSecret.substring(0, 20) + '...' : 'null');
        
        // Confirm payment with Stripe
        console.log('üîÑ Confirming payment with Stripe...');
        const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: cardElement,
            billing_details: {
              email: firebase.auth().currentUser.email
            }
          }
        });
        console.log('Stripe response - error:', error, 'paymentIntent:', paymentIntent);
        
        if (error) {
          console.error('‚ùå Payment failed:', error);
          document.getElementById('card-errors').textContent = error.message;
        } else {
          console.log('‚úÖ Payment successful:', paymentIntent);
          showSuccess(`Payment successful! ${selectedCreditsCount} credits added to your account.`);
          hidePaymentModal();
          loadUserCredits(); // Refresh credit count
        }
      } catch (error) {
        console.error('üí• Error processing payment:', error);
        console.error('Error details:', error.message, error.code, error.details);
        showError('Payment processing failed. Please try again. Error: ' + error.message);
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Complete Purchase';
      }
    }
    
    // Check credits before AI operations
    async function checkCreditsForOperation(operation) {
      if (userCredits <= 0) {
        showError('Insufficient credits! Please purchase more credits to continue.');
        showPaymentModal();
        return false;
      }
      return true;
    }
    
    // Track usage and decrement credits
    async function trackUsage(action, details = {}) {
      try {
        const token = await firebase.auth().currentUser.getIdToken();
        const response = await fetch('https://us-central1-codecraftmd-e48b0.cloudfunctions.net/trackUsage', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ action, details })
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        // Update local credit count
        if (['ai_analysis', 'enhanced_billing'].includes(action)) {
          userCredits = Math.max(0, userCredits - 1);
          document.getElementById('creditCount').textContent = userCredits;
        }
      } catch (error) {
        console.error('Error tracking usage:', error);
        if (error.message.includes('429') || error.message.includes('Insufficient credits')) {
          showError('Insufficient credits! Please purchase more credits to continue.');
          showPaymentModal();
        }
      }
    }
    </script>
    function updateUsageDisplay() {
      const usageElement = document.getElementById('usageCounter');
      if (usageElement) {
        const remaining = Math.max(0, FREE_CONSULTATION_LIMIT - userUsage.consultationCount);
        
        if (userUsage.subscriptionStatus === 'active' || userUsage.subscriptionStatus === 'unlimited') {
          usageElement.innerHTML = `
            <span class="text-green-600 font-medium">
              ‚úÖ Unlimited Access (Subscribed)
            </span>
          `;
        } else {
          const color = remaining <= 1 ? 'text-red-600' : remaining <= 3 ? 'text-yellow-600' : 'text-green-600';
          usageElement.innerHTML = `
            <span class="${color} font-medium">
              ${remaining} free consultations remaining
            </span>
          `;
        }
      }
    }
    
    function showBillingModal() {
      const modal = document.getElementById('billingModal');
      if (modal) {
        modal.classList.remove('hidden');
      } else {
        // Fallback - redirect to Stripe checkout
        showError('You have reached the free consultation limit. Please upgrade to continue.');
        setTimeout(() => {
          // This will be replaced with actual Stripe checkout URLs
          window.open('https://billing.stripe.com/your-checkout-url', '_blank');
        }, 3000);
      }
    }
    
    function closeBillingModal() {
      const modal = document.getElementById('billingModal');
      if (modal) {
        modal.classList.add('hidden');
      }
    }
    
    // Stripe Checkout Integration
    function redirectToStripeCheckout(planType) {
      console.log('Redirecting to Stripe checkout for:', planType);
      
      // These URLs will be replaced with actual Stripe checkout URLs
      const checkoutUrls = {
        pay_per_consult: 'https://buy.stripe.com/test_your_pay_per_consult_link',
        monthly_subscription: 'https://buy.stripe.com/test_your_monthly_subscription_link'
      };
      
      // For now, show a placeholder message
      showSuccess(`Redirecting to ${planType} checkout... (Stripe integration pending)`);
      
      // TODO: Replace with actual Stripe checkout
      // window.location.href = checkoutUrls[planType] + '?client_reference_id=' + currentUser.uid;
      
      // Temporary: Close modal for demo purposes
      setTimeout(() => {
        closeBillingModal();
        // Simulate successful payment for testing
        if (confirm('Simulate successful payment for testing?')) {
          simulateSuccessfulPayment(planType);
        }
      }, 2000);
    }
    
    // Temporary function for testing - remove in production
    async function simulateSuccessfulPayment(planType) {
      try {
        const newStatus = planType === 'monthly_subscription' ? 'active' : 'credits';
        
        await db.collection('user_usage').doc(currentUser.uid).update({
          subscriptionStatus: newStatus,
          subscriptionType: planType,
          subscriptionStart: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        userUsage.subscriptionStatus = newStatus;
        updateUsageDisplay();
        
        showSuccess('Payment successful! You can now use unlimited consultations.');
        
      } catch (error) {
        console.error('Error updating subscription status:', error);
        showError('Error updating subscription status');
      }
    }
  </script>

</body>
</html>
